globals:
    periodic:
        - MINR: float

entities:
    household:
        fields:
            # period and id are implicit
            - num_persons:  {type: int, initialdata: False}
            - nch:          {type: int, initialdata: False}
            - start_period: {type: int, initialdata: False}
           
        links:
            persons: {type: one2many, target: person, field: hh_id}

        processes:
            num_persons: countlink(persons)
            nch: countlink(persons, age <= 18)
            maxnch: grpmax(nch)
            dump_csv_h: csv(dump())

    person:
        fields:
            # period and id are implicit
            - age:          int
            - dead:         bool
            - gender:       bool
            - work:         bool
            
            - partner_id:   int            
            - hh_id:        int
            - f_id:         int
            - m_id:         int
            
            - weight:       {type: int, initialdata: False}
            - v1:           {type: float, initialdata: False}
            - nch:          {type: int, initialdata: False}
            - eduach:       {type: int, initialdata: False}
            - m_age:        {type: int, initialdata: False}
            - agegroup:     {type: int, initialdata: False}
            - ch_minage:    {type: int, initialdata: False}
            - ch_maxage:    {type: int, initialdata: False}
            - young_mother: {type: bool, initialdata: False}
            
#        weight: weight

        links:
            partner: {type: many2one, target: person, field: partner_id}
            household: {type: many2one, target: household, field: hh_id}
            father: {type: many2one, target: person, field: f_id}
            mother: {type: many2one, target: person, field: m_id}
            children: {type: one2many, target: person, field: m_id}

        macros:
            ISCHILD: age < 18
            
#            BOY: ISCHILD and MALE
#            GIRL: ISCHILD and FEMALE
            
            MALE: gender
            FEMALE: not gender

            CONSTANT_MACRO: 3

            LOWER_SECONDARY_EDU: eduach == 2
            UPPER_SECONDARY_EDU: eduach == 3
            TERTIARY_EDU: eduach == 4

        # possible transitions & regressions. The actual list used in the
        # simulation must be defined below
        processes:
            bp: breakpoint(2002)

            test_init:
                - eduach: choice([2, 3, 4], [0.40, 0.35, 0.25])
                - weight: randint(1, 11)
#                - new('person', number=10000000,
#                      age=randint(102),
#                      gender=choice([True, False], [0.5, 0.5]),
#                      work=choice([True, False], [0.5, 0.5]),
#                      partner_id=1)

            temp_global: age + 10
            temp_global_test1:
                - temp_global: temp_global * 2
            temp_global_test2:
                - temp_global: temp_global - 10
            show_temp_global: show(temp_global)

            test_expr:
                - show("count:", grpcount())
                - show("age:", age)
                - show("age + 1:", age + 1)
                - show("age / 10:", age / 10)
                - show("100 / age:", 100 / age)
                - show("age * (1 / 2):", age * (1 / 2))
                - show("clip(age, 10, 50)", clip(age, 10, 50))

            test_globals:
                - no_index: MINR
                - const_index: MINR[2005]
                - expr_index: MINR[period - 1]
                - show("implicit current period:", no_index, 
                       "/ in 2005:", const_index, 
                       "/ previous period:", expr_index)
                - globals_in_expr: 1.0 + MINR
                - idx_globals_in_expr: 1.0 + MINR[2002]
                - expr_idx_globals_in_expr: 1.0 + MINR[period - 1]
                - yob: randint(1900, period)
                - yop: yob + 65
                - vector_idx_globals_in_expr: 1.0 + MINR[yob + 65]
                - show("yob", yob, "yop", yop, "v", vector_idx_globals_in_expr)

            test_macro:
                - ischild: age < 18
                - test_nonmacro1: show(grpsum(ischild))
                - test_macro1: show(grpsum(ISCHILD))
#                - breakpoint(2002)

                - age: age + 1

                - test_nonmacro2: show(grpsum(ischild))
                - show("test grpsum:", grpsum(ischild))
                - test_macro2: show(grpsum(ISCHILD))

                - show('male students', grpcount(MALE and LOWER_SECONDARY_EDU))

#                - show('expr wh missing parenthesis', grpcount(age < 15 & eduach == 2))
                # equivalent to grpcount(age < (15 & eduach) == 2)
                # equivalent to grpcount((age < (15 & eduach)) *and* ((15 & eduach) == 2))
                # calls __nonzero__ on the first part (age < (15 & eduach))
                - show(groupby(eduach, gender))

            agegroup: if(age < 50, 5 * trunc(age / 5), 10 * trunc(age / 10))

            test_align:
                - num_all: grpcount()
                - num_women: grpcount(not gender)
                - num_men: grpcount(gender)

                # manual alignment on an integer column 
                # ------------------------------------- 
                - int_aligned: align(age,
                                     expressions=[gender],
                                     possible_values=[[False, True]],
                                     probabilities=[0.1, 0.2])
                - num_aligned: grpcount(int_aligned)
                - num_aligned_women: grpcount(int_aligned and not gender)
                - num_aligned_men: grpcount(int_aligned and gender)

                - assertTrue(num_aligned_women - 0.1 * num_women < 1.0)
                - assertTrue(num_aligned_men - 0.2 * num_men < 1.0)
                - assertEqual(num_aligned_women + num_aligned_men, num_aligned)

                # check that older individuals are taken first
                - assertTrue(grpmax(age, filter=gender and not int_aligned)
                             <= 
                             grpmin(age, filter=gender and int_aligned))
                - assertTrue(grpmax(age, filter=not gender and not int_aligned)
                             <= 
                             grpmin(age, filter=not gender and int_aligned))

                # manual alignment on a float column (with nan)
                # --------------------------------------------- 
                - nan_age: if(age < 10, nan, age * 1.0)
                - assertEqual(grpcount(nan_age != nan_age), grpcount(age < 10))
                - float_aligned: align(nan_age,
                                       expressions=[gender],
                                       possible_values=[[False, True]],
                                       probabilities=[0.1, 0.2])
                - num_aligned: grpcount(float_aligned)
                - num_aligned_women: grpcount(float_aligned and not gender)
                - num_aligned_men: grpcount(float_aligned and gender)

                - assertTrue(num_aligned_women - 0.1 * num_women < 1.0)
                - assertTrue(num_aligned_men - 0.2 * num_men < 1.0)
                - assertEqual(num_aligned_women + num_aligned_men, num_aligned)

                # check that nan are chosen first
                # we have two different scenarii:
                # 1) we have more "nan" than we need
                #    => we check that all taken are "nan"
                # 2) or we have less "nan" than we need
                #    => we check that all "nan" are taken / aligned
                # and we have to check separetly for men and women

                - isnan: nan_age != nan_age

                # women
                
                # more than 10% women are "nan"
                - morenan: grpcount(not gender and isnan) > num_women * 0.1
                - all_taken_nan: grpmin(isnan,
                                        filter=not gender and float_aligned)
                - all_nan_taken: grpmin(float_aligned,
                                        filter=not gender and isnan)
                - assertTrue(if(morenan, all_taken_nan, all_nan_taken))

                # men

                # more than 20% men are "nan"
                - morenan: grpcount(gender and isnan) > num_men * 0.2
                - all_taken_nan: grpmin(isnan, filter=gender and float_aligned)
                - all_nan_taken: grpmin(float_aligned, filter=gender and isnan)

                - assertTrue(if(morenan, all_taken_nan, all_nan_taken))

                # manual alignment with a constant 
                # -------------------------------- 
                - const_aligned: align(False, filter=age < 10,
                                       expressions=[gender],
                                       possible_values=[[False, True]],
                                       probabilities=[0.1, 0.2])
                - num_aligned: grpcount(const_aligned)
                - num_aligned_women: grpcount(const_aligned and not gender)
                - num_aligned_men: grpcount(const_aligned and gender)

                - assertTrue(num_aligned_women - 0.1 * num_women < 1.0)
                - assertTrue(num_aligned_men - 0.2 * num_men < 1.0)
                - assertEqual(num_aligned_women + num_aligned_men, num_aligned)

                # check that individuals with higher ids are chosen first
                - assertTrue(grpmax(id, filter=gender and (age < 10) and
                                               not const_aligned)
                             <= 
                             grpmin(id, filter=gender and const_aligned))
                - assertTrue(grpmax(id, filter=not gender and (age < 10) and
                                               not const_aligned)
                             <= 
                             grpmin(id, filter=not gender and const_aligned))

                # alignment with an implicit filter 
                # ---------------------------------
 
                # the "dead" variable is also used for the cleanup process
                - dead: if(gender, 
                           align(0.0, 
                                 take=age > 95, leave=ISCHILD,
                                 fname='al_p_dead_m.csv'),
                           align(0.0,
                                 take=age > 95, leave=ISCHILD,
                                 fname='al_p_dead_f.csv'))

                - assertEqual(grpcount(not dead and (age > 95)), 0)
                - assertEqual(grpcount(dead and ISCHILD), 0)

                # 3d alignment (gender, age, period) 
                # ----------------------------------
                - dead2: align(0.0,
                               take=age > 95, leave=ISCHILD,
                               fname='al_p_dead.csv')

                - assertTrue(grpcount(dead != dead2) <= 105)

                # 1d alignment (period)
                # ---------------------
                - period_only: align(0.0, fname='al_p_period_only.csv')
                - num_aligned: grpcount(period_only)
                - target_percent: if(period == 2002, 0.2,
                                  if(period == 2003, 0.3,
                                  0.4))
                - assertTrue(num_aligned - target_percent * num_all < 1.0)

                # 1d alignment (other than period)
                # --------------------------------
                - one_dim: align(0.0, fname='al_p_one_dim.csv')

                - num_aligned: grpcount(one_dim)
                - num_aligned_women: grpcount(one_dim and not gender)
                - num_aligned_men: grpcount(one_dim and gender)

                - assertTrue(num_aligned_women - 0.2 * num_women < 1.0)
                - assertTrue(num_aligned_men - 0.3 * num_men < 1.0)
                - assertEqual(num_aligned_women + num_aligned_men, num_aligned)

                # align using a temporary variable
                - temp: age + 1

                # these do not produce exactly the same values because of the
                # way we correct for "fractional persons" with a probability of
                # adding one person. However the difference should be <= than
                # the number of alignment categories.
                - var_aligned: align(0.0, fname='al_p_dead_m.csv')
                - temp_aligned: align(0.0, fname='al_p_temp.csv')
                - expr_aligned: align(0.0, fname='al_p_expr.csv')
                - assertTrue(grpcount(temp_aligned != var_aligned) <= 105)
                - assertTrue(grpcount(expr_aligned != var_aligned) <= 105)

            test_logit:
                # equivalent to uniform() > 0.5
                - simple: logit_regr(0.0)
                - fixed_percent: logit_regr(0.0, align=0.5)
                
            test_log_regr:
                # currently filter is ignored for all non-aligned regressions,
                # so this test fails!
                - v1: "42"
                - v1: log_regr(2.484557 + 0.2283921 * age - 0.0026106 * age **2,
                               filter=MALE)
                - v2: if(MALE,
                         log_regr(2.484557 + 0.2283921 * age - 0.0026106 * age **2),
                         42)
                - v3: if(MALE, 
                         exp(2.484557 + 0.2283921 * age - 0.0026106 * age **2),
                         42)
                - show('v1', v1, '\n',
                       'num values:', grpcount(v1 != 42), '\n',
                       'num problems:', grpcount((v1 != v2) or (v2 != v3)))
                
                - err: normal()
                       
                - v4: if(MALE,
                         log_regr(2.484557 + 0.2283921 * age, error_var='err'),
                         0)
                - v5: if(MALE,
                         exp(2.484557 + 0.2283921 * age + err),
                         0)
                - show('v4', v4, '\n', 'v5', v5, '\n',
                       'num values:', grpcount(v4 > 0), '\n',
                       'num problems:', grpcount(v4 != v5))

                - v6: if(MALE,
                         log_regr(2.484557 + 0.2283921 * age, mult=2),
                         0)
                - v7: if(MALE,
                         exp(2.484557 + 0.2283921 * age + normal(0, 1) * 2),
                         0)
                # max(normal) - min(normal) is commonly < 10
                - show('log(v6)', log(v6), '\n', 'log(v7)', log(v7), '\n',
                       'num values:', grpcount(v6 > 0), '\n',
                       'num problems:', grpcount(log(v6) - log(v7) > 20))
            
            test_uninitialized_var: not to_give_birth
            to_give_birth: if(not gender and (age >= 15) and (age <= 50),
                              logit_regr(0.0, align='al_p_birth.csv'),
                              False) 
            newbirth: if(to_give_birth,
                         if(age > 45,
                            new('person',
                                age=0,
                                partner_id=-1,
                                hh_id=hh_id,
                                m_id=id,
                                f_id=partner.id,
                                m_age=age,
                                weight=weight, 
                                gender=choice([True, False], [0.51, 0.49])),  
                            new('person',
                                age=0,
                                partner_id=-1,
                                hh_id=hh_id,
                                m_id=id,
                                f_id=partner.id,
                                m_age=age,
                                weight=weight, 
                                young_mother=True, 
                                gender=logit_regr(0.0))),
                         -1)
            
            test_o2m:
                - nch: countlink(children)
                - nch_012: countlink(children, age <= 12)
                - ch_012_age_sum: sumlink(children, age, age <= 12)
                - ch_012_age2_sum: sumlink(children, age * 2, age <= 12)
                - ch_012_age_avg: avglink(children, age, age <= 12)
                - ch_minage: minlink(children, age)
                - ch_maxage: maxlink(children, age)
                - xx: show(dump(nch, nch_012, ch_012_age_sum, ch_012_age2_sum,
                                ch_012_age_avg, filter=(nch > 0) and (id < 100)))
            
            test_mixed_links:
                - show('mother vs step-mother:', mother.age, partner.mother.age)
                - show('other sex step-parent:',
                        where(gender, partner.mother.age, partner.father.age))
                - show('age vs age if married:', age, partner.partner.age)
                - show('mother.partner.age:', mother.partner.age, 
                       'father.age:', father.age)
                - show('hh.id:', household.id,
                       'hh.id+1:', household.get(id + 1),
                       'edu:', eduach,
                       'num persons:', household.get(countlink(persons)),
                       'num high edu:', household.get(countlink(persons, eduach == 4)))

#            test_extra_comma:           
#                - show('test extra colon'),
                 
            test_predictor1:
                predictor: plop
                expr: if(age < 10, age ** 3, age ** 2)
            test_predictor2:
                predictor: plop
                expr: if(age >= 10, 100, plop)

            test_predictor3:
                - a:
                    predictor: plop2
                    expr: if(age < 10, age ** 3, age ** 2)
                - b:
                    predictor: plop2
                    expr: if(age >= 50, 100, plop2)
                - show(plop2)
            
            test_clone:
                - clone(filter = age == 95,
                        f_id = id,
                        m_id = id,
                        nch = household.get(countlink(persons)))
                                    
            
            marriage:
                - married: partner_id != -1

                - to_marry: (age >= 18) and (age <= 90) and not married

                - avg_age_men: grpavg(age, filter=to_marry and gender)
                - difficult_match: if(to_marry and not gender,
                                      abs(age - avg_age_men),
                                      nan)
                - workless: not work
# commented to make the test faster                
#                                      + 0.0015 * abs(household.num_persons - other.household.num_persons)
#                                      - 0.0015 * abs(household.get(countlink(persons, age < 18)) 
#                                                     - other.household.get(countlink(persons, age < 18)))
                - partner_id:
                    if(to_marry,
                       matching(set1filter=not gender,
                                set2filter=gender,
                                score=- 0.4893 * other.age
                                      + 0.0131 * other.age ** 2
                                      - 0.0001 * other.age ** 3
                                      + 0.0467 * (other.age - age)
                                      - 0.0189 * (other.age - age) ** 2
                                      + 0.0003 * (other.age - age) ** 3
                                      - 0.9087 * (other.work and workless)
                                      - 1.3286 * (other.workless and not workless)
                                      - 0.6549 * (other.work and work)
                                      - 0.7939 * ((other.eduach == 3) and TERTIARY_EDU)
                                      - 1.4128 * ((other.eduach == 2) and TERTIARY_EDU)
                                      - 0.8984 * ((other.eduach == 4) and UPPER_SECONDARY_EDU)
                                      - 1.5530 * ((other.eduach == 4) and LOWER_SECONDARY_EDU)
                                      - 0.5451 * ((other.eduach == 2) and LOWER_SECONDARY_EDU),
                                orderby=difficult_match),
                       partner_id)
                              
                - just_married: to_marry and (partner_id != -1)

                - newhousehold: new('household', filter=just_married and not gender,
                                    start_period=period)
                - hh_id: if(just_married,
                            if(gender, partner.newhousehold, newhousehold),
                            hh_id)

            test_compound:
                - show(min(age, 10))
                - show(grpmax(min(age, 10)))
            
                - assertEqual(grpmax(min(age, 10)), 10)
                - assertEqual(grpmin(max(age, 20)), 20)
                 
            test_lag:
#                - lagglobal: show(lag(MINR))
                
                - lagavg: show(lag(grpavg(age)))
                - avglag: show(grpavg(lag(age)))

                - assertEqual(lag(age, missing=0), if(age == 0, 0, age - 1))
                
                - num_birth: grpcount(age == 0)
                - assertEqual(grpcount(lag(age) == -1), num_birth)
                - assertEqual(grpcount(lag(age, missing=0) == -1), 0)

                - num1yearold: grpcount(age == 1)
                - assertEqual(grpcount(lag(age, missing=0) == 0),
                              num1yearold + num_birth)

                - assertEqual(lag(age, 2), lag(lag(age)))

                # for clones lag(age, 2) is -1, even if the parent of the clone
                # is alive in period - 2
                - cloned: (m_id == f_id) and (m_id != -1)
                - assertEqual(if(cloned,
                                 age - 2,
                                 lag(age, 2)),
                              if(period > 2002,
                                 if(age >= 2, age - 2, -1),
                                 -1))

            test_duration:
                - show("> 10", duration(age > 10))
                - show("max(d, 2)", max(duration(age > 10), 2))

            test_dump_init:
                - empty_file: csv(fname='empty_file.csv')
                - one_line_header: csv('period', 'id', 'age', fname='person_ages.csv')
                - two_line_header: csv(['average', 'gini'],
                                       ['-', 'inequality coefficient'], 
                                       fname='person_age_aggregates.csv')

            test_dump: 
                - expr: csv(dump(gender, age, partner_id, partner.age),
                            suffix='partner_ages')
                - full: csv(dump(), suffix='full')
                - twodumps: csv(dump(gender, age, filter=not gender),
                                'and now something completely different', 
                                dump(gender, age, filter=gender),
                                suffix='split_ages')
                # no fname nor suffix                
                - csv(dump(age))
                - fname: csv(dump(age), fname='person_ages_{period}.csv')
                # append
                - csv(dump(period, id, age, filter=id < 10, header=False),
                      fname='person_ages.csv', mode='a')
                # test show
                - show(dump(gender, age, filter=id < 10))
                # aggregate and filter (0.6 * is important, otherwise we don't
                # get a 0-d ndarray back, which was the cause of a bug)
                - median_age: 0.6 * grpmedian(age)
                - csv(dump(age, grpavg(age), age > grpavg(age), median_age, 
                           filter=id < 10),
                      suffix='aggregate_filter') 
                
            test_csv:
                - expr: csv(grpavg(age),
                            fname='person_age_aggregates.csv', mode='a')
                - exprs: csv(grpavg(age), grpgini(age),
                             fname='person_age_aggregates.csv', mode='a')

            cleanup: remove(lag(dead))
            
            test_o2m_aggregate: show(grpavg(countlink(children)))

            test_grpsum:
                - population_age: grpsum(age)
                - males_age: grpsum(age, filter=MALE)
                - females_age: grpsum(age, filter=FEMALE)
                - assertEqual(males_age + females_age, population_age)
                
                # assign to each man the sum of men ages and to each woman
                # the sum of women ages
                - filtered: if(MALE, grpsum(age), grpsum(age))
                - assertEqual(grpcount(filtered == males_age),
                              grpcount(MALE))
                - assertEqual(grpcount(filtered == females_age),
                              grpcount(FEMALE))

            test_grpmedian:
                # scalar (there is not much point but it should not crash)
                - median_age: grpmedian(age)
                - median_age2: grpmedian(median_age)
                - assertEqual(median_age, median_age2)

                # without filter
                - median_age: grpmedian(age)
                - num_young: grpcount(age < median_age)
                - num_median: grpcount(age == median_age)
                - num_old: grpcount(age > median_age)
                - num_total: grpcount()

                - assertTrue(num_young <= num_total / 2)
                - assertTrue(num_old <= num_total / 2)
                - assertEqual(num_young + num_median + num_old, num_total)

                # with a filter
                - median_age: grpmedian(age, filter=gender)
                - num_young: grpcount(gender and (age < median_age))
                - num_median: grpcount(gender and (age == median_age))
                - num_old: grpcount(gender and (age > median_age))
                - num_total: grpcount(gender)

                - assertTrue(num_young <= num_total / 2)
                - assertTrue(num_old <= num_total / 2)
                - assertEqual(num_young + num_median + num_old, num_total)

            test_grppercentile:
                # without filter
                - age_10p: grppercentile(age, 10)
                - num_young: grpcount(age < age_10p)
                - num_10p: grpcount(age == age_10p)
                - num_old: grpcount(age > age_10p)
                - num_total: grpcount()

                - assertTrue(num_young <= num_total / 10)
                - assertTrue(num_old <= num_total * 90 / 100)
                - assertEqual(num_young + num_10p + num_old, num_total)

                # with a filter
                - age_10p: grppercentile(age, 10, filter=gender)
                - num_young: grpcount(gender and (age < age_10p))
                - num_10p: grpcount(gender and (age == age_10p))
                - num_old: grpcount(gender and (age > age_10p))
                - num_total: grpcount(gender)

                - assertTrue(num_young <= num_total / 10)
                - assertTrue(num_old <= num_total * 90 / 100)
                - assertEqual(num_young + num_10p + num_old, num_total)

            test_grpgini:
                - show('grpgini(age)', grpgini(age))
                - show('grpgini(age) by sex:', grpgini(age, filter=MALE), '/', grpgini(age, filter=FEMALE))
                - assertEqual(grpgini([1, 1, 1]), 0)
                - assertEqual(grpgini([0, 0, 0, 1]), 0.75)
                
            test_choice:
                - intchoice: choice([0, 5, 10], [0.1, 0.2, 0.7])
                - num0: grpcount(intchoice == 0)
                - num5: grpcount(intchoice == 5)
                - num10: grpcount(intchoice == 10)
                - num_total: grpcount()
                - assertEqual(num0 + num5 + num10, num_total)

                # test choices and probablities being expressions
                - zero: grpavg(age) - grpavg(age)
                
                - p0: zero + 0.1
                - p1: zero + 0.3
               
                - fchoice: choice([zero, zero + 1.0, zero + 2.0], [p0, p1, 1.0 - p0 - p1])

                - num0: grpcount(fchoice == 0.0)
                - num1: grpcount(fchoice == 1.0)
                - num2: grpcount(fchoice == 2.0)
                - assertEqual(num0 + num1 + num2, num_total)
                # this assertion can fail but it should occur pretty rarely
                - assertTrue((num0 < num1) and (num1 < num2))

            test_groupby:
                # fails as it should
#                - show('groupby scalar', groupby(True, gender))
                # this is currently broken
#                - show('groupby scalar', groupby(grpavg(age), gender))

                - show('groupby with percent when total is int(0)',
                       groupby(age, filter=age > 200, percent=True))
                - show('expr=grpsum(weight)', 
                       groupby(agegroup, gender, expr=grpsum(weight)))
                - show(groupby(round(logit_score(0.0), 1)))
                - show('explicit count', groupby(round(logit_score(0.0), 1), 
                                                 expr=grpcount()))
                - show('grpmin', groupby(agegroup, expr=grpmin(age)))
                - temp_scalar: grpavg(age)                                 
                - show('wh scalar variable', groupby(agegroup, expr=temp_scalar * grpmin(age)))
                                                 
                - num_persons2: show(groupby(agegroup, gender))
                - num_persons2_percent: show(groupby(agegroup, gender, percent=True))
                - num_persons_weight_percent: show(groupby(agegroup, gender, expr=grpsum(weight), percent=True))
                - num_persons_csv: csv(groupby(agegroup, gender), suffix='groupby')
                - num_persons3: show(groupby(agegroup, dead, gender))
                
                - ismarried: partner_id != -1
                - num_persons3t: show(groupby(agegroup, gender, ismarried))
                - num_alive: show(groupby(agegroup, gender,
                                          expr=grpcount(not dead)))
                - num_married: show(groupby(agegroup, gender,
                                            expr=grpcount(ismarried)))
                - num_widows: show(groupby(agegroup, gender, 
                                           expr=grpcount(partner.dead)))
                - num_bad_partner: show(groupby(agegroup, gender, 
                                                expr=grpcount((partner_id != -1) and (partner.partner.id != id))))
                - agediff: show(groupby(agegroup, gender, 
                                        expr=grpavg(age - if(partner.age == -1, nan, partner.age))))
#                                        expr=grpavg(abs(age - if(partner.age == -1, nan, partner.age)))))
#                                        expr=grpsum(countlink(children)) / grpsum(not dead)))
#                                        expr=grpavg(nch)))
#                - minmax_age: show(groupby(id / 100, gender, expr=grpmax(age) - grpmin(age)))
                
            show_weight: show("avg weight", grpavg(weight), 
                              "total population", grpsum(weight))


simulation:
    init:
        - person: [
            test_init,
            test_dump_init
        ]

    processes:
        - person: [
 #                 bp,
                   cleanup,
                   
                   temp_global,
                   show_temp_global,
                   temp_global_test1,
                   show_temp_global,
                   temp_global_test2,
                   show_temp_global,
                    
                   test_expr,
                   test_globals,
                   test_macro,
                   test_compound, 
                   agegroup,
                   # test_align,
                   # test_logit,
                   # test_log_regr,

                   # [marriage,4],
                   
#                   test_extra_comma,
                   
#                   test_uninitialized_var,
                   
                   to_give_birth, newbirth,
                   test_lag,
                   test_duration,
                   
                   test_o2m,
                   test_mixed_links,
                   test_clone,
                   
                   test_predictor1, test_predictor2, test_predictor3,

                   test_o2m_aggregate,
                   test_grpsum,
                   test_grpmedian,
                   test_grppercentile,
                   test_grpgini,
                   
                   test_choice,
                   
                   show_weight,
                   test_groupby,
                   test_dump,
                   test_csv,

        ]
        - household: [num_persons, nch, maxnch, 
#                      dump_csv_h
                     ]

    input:
        file: small.h5
    output:
        file: simulation.h5

    random_seed: 0
    start_period: 2002   # first simulated period
    periods: 2
    default_entity: person 
    