# second entity, links, link methods, init, procedures, local variables,
# dump's suffix argument, choice
entities:
    menage:
        fields:
            # period and id are implicit
            - nb_persons:  {type: int, initialdata: false}
            - nb_children: {type: int, initialdata: false}
            - region_id:   {type: int, initialdata: false}
            
        links:
            persons: {type: one2many, target: person, field: res}
            
        processes:
            init_region_id:
                - region_id: choice([0, 1, 2, 3], [0.1, 0.2, 0.3, 0.4])

            household_composition:
                - nb_persons: countlink(persons)
                - nb_children: countlink(persons, age < 18)
                
    person:
        fields:
            - age:    int
            - sexe:   int
            - agegroup: {type: int, initialdata: false}
            - res:    int
            - pere:   int
            - mere:   int
            - conjoint: int
            - civilstate: {type: int, initialdata: false}
         
        links:
            household: {type: many2one, target: menage, field: res}
            mere:      {type: many2one, target: person, field: mere}
            pere:      {type: many2one, target: person, field: pere}
            conj:  {type: many2one, target: person, field: conjoint}
        # possible transitions and regressions. The actual list used in the
        # simulation must be defined below
        
        
        macros:
            MALE: 1
            FEMALE: 2
            ISMALE: sexe == 1
            ISFEMALE: sexe == 2

            UNSET: 0

            SINGLE: 1
            MARRIED: 2
            DIVORCED: 3
            WIDOW: 4
            ISSINGLE: civilstate == 1
            ISMARRIED: civilstate == 2
            ISDIVORCED: civilstate == 3
            ISWIDOW: civilstate == 4
            
            
        processes:
            ageing:
                - age: age + 1
                - agegroup: if(age < 50,
                               5 * trunc(age / 5),
                               10 * trunc(age / 10))
                - show('Avg age of mother', grpavg(mere.age, filter=mere.age>-2))
                - show('Avg age of conjoint', grpavg(conj.age, filter=conj.age>-1))

            birth:
                - to_give_birth: logit_regr(0.0,
                                            filter=ISFEMALE and (age >= 15) and (age <= 50),
                                            align='data\\p_birth.csv')
                - new('person', filter=to_give_birth,
                      mere = id,
                      pere = conj.id,
                      res = res,
                      age = 0,
                      conjoint = 0,
                      civilstate = SINGLE,
                      sexe = choice([1,2], [0.51, 0.49])
                      )               
                - show('Avg age of "young" mother', grpavg(age, filter=to_give_birth and ISFEMALE))
                - show('Avg age of mother', grpavg(mere.age, filter=mere.age>-1))  #la condition -1 permet de ne prendre que les vraies meres ! 
                - show('Number of birth', grpcount(age==0))
                - show('Avg age of conjoint', grpavg(conj.age, filter=conj.age>-1))
             
            death:
                - dead: if(ISMALE,
                           logit_regr(0.0, align='data\\p_dead_m.csv'),
                           logit_regr(0.0, align='data\\p_dead_f.csv'))
                #- civilstate: if(partner.dead, WIDOW, civilstate)
                - show('Avg age of conjoint', grpavg(conj.age, filter=conj.age>-1))
                - conjoint: if(conj.dead, UNSET, conjoint)
                - show('Avg age of dead men', grpavg(age,filter=dead and ISMALE))
                - show('Avg age of dead women', grpavg(age,filter=dead and ISFEMALE))
                - show('Number of male death', grpcount(dead and ISMALE))
                - show('Number of male death', grpcount(dead and ISFEMALE))
                - show('Number of male death', grpcount(dead))
                #- show('Avg age of dead women', grpavg(age, filter=dead and ISFEMALE))
                #- show('Widows', grpsum(ISWIDOW))
                - remove(dead)       
   

simulation:
    init: 
        - menage: [init_region_id]
    processes:
        #- person: [age, agegroup, dump_info, show_demography]
        - person: [ageing, birth, death]
        - menage: [household_composition]

    input:
        file: simple2009.h5
    output:
        file: simulTest.h5

    # first simulated period
    start_period: 2009
    periods: 2