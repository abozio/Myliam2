inf_mere( which(men$sexepr[liste]==2 & men[liste,paste0("hodln",i)]=="1"), "pr")
inf_pere( which(men$sexepr[liste]==1 & men[liste,paste0("hodln",i)]=="2"), "pr")
inf_mere( which(men$sexepr[liste]==2 & men[liste,paste0("hodln",i)]=="2"), "pr")
inf_pere( which(men$sexepr[liste]==1 & men[liste,paste0("hodln",i)]=="3"), "cj")
inf_mere( which(men$sexepr[liste]==2 & men[liste,paste0("hodln",i)]=="3"), "cj")
print(length(liste))
hors_dom = rep.int(1,length(liste))
ajout <- cbind(sexe,anais,couple,dip6,nb_enf,situa,info_pere,info_mere, hors_dom,hodln)
}
enf_ailleurs <-save_inf(1)
View(enf_ailleurs)
#TODO: gerer les valeurs manquante
#TODO: s'occuper de la precision sur les statuts
save_inf <- function(i){
liste  <<- which(men[,paste0("hodln",i)] !="")
hodln <- men[liste,paste0("hodln",i)]
sexe <- character(length(liste))
# info sur l'enfant
sexe   <- men[liste,paste0("hodsex",i)]
anais  = men[liste,paste0("hodan",i)]
couple = men[liste,paste0("hodco",i)] #couple=1 et couple=2 devront etre groupes en couple=1
couple[which(couple=="2")]<-"3"
dip6   = men[liste,paste0("hodip",i)]
nb_enf = men[liste,paste0("hodenf",i)]
# son activite
situa=  1*(men[liste,paste0("hodemp",i)]==1)
+ 2*(men[liste,paste0("hodcho",i)]==3)
+ 3*(men[liste,paste0("hodcho",i)]==3)
+ 4*(men[liste,paste0("hodcho",i)]==1)
+ 5*(men[liste,paste0("hodemp",i)]==2)
+ 6*(men[liste,paste0("hodcho",i)]==2)
+ 7*(men[liste,paste0("hodcho",i)]==4)
# on verifie que hodcho est rempli seulement quand hodemp=3
classif = max(men[liste,paste0("hodniv",i)],men[liste,paste0("hodpriv",i)])
# info sur les parents
info_mere    <- matrix("",length(liste),5)
info_pere    <- matrix("",length(liste),4)
colnames(info_mere) <- c("mere","jemnais","gparmat","jemprof","jemact")
colnames(info_pere) <- c("pere","jepnais","gparpat","jepprof")
inf_pere <- function(enfants,pers) {
if (pers == "pr") {
info_pere[enfants,] <<- as.matrix(men[liste[enfants],c("idpr","anaispr","gparpr","cs42pr")])
}
if (pers == "cj") {
info_pere[enfants,] <<- as.matrix(men[liste[enfants],c("idcj","anaiscj","gparcj","cs42cj")])
}
}
inf_mere <- function(enfants,pers) {
if (pers == "pr") {
info_mere[enfants,1:4] <<- as.matrix(men[liste[enfants],c("idpr","anaispr","gparpr","cs42pr")])
}
if (pers == "cj") {
info_mere[enfants,1:4] <<- as.matrix(men[liste[enfants],c("idcj","anaiscj","gparcj","cs42cj")])
}
}
inf_pere( which(men$sexepr[liste]==1 & men[liste,paste0("hodln",i)]=="1"), "pr")
inf_mere( which(men$sexepr[liste]==1 & men[liste,paste0("hodln",i)]=="1"), "cj")
inf_pere( which(men$sexepr[liste]==2 & men[liste,paste0("hodln",i)]=="1"), "cj")
inf_mere( which(men$sexepr[liste]==2 & men[liste,paste0("hodln",i)]=="1"), "pr")
inf_pere( which(men$sexepr[liste]==1 & men[liste,paste0("hodln",i)]=="2"), "pr")
inf_mere( which(men$sexepr[liste]==2 & men[liste,paste0("hodln",i)]=="2"), "pr")
inf_pere( which(men$sexepr[liste]==1 & men[liste,paste0("hodln",i)]=="3"), "cj")
inf_mere( which(men$sexepr[liste]==2 & men[liste,paste0("hodln",i)]=="3"), "cj")
print(length(liste))
to_match = rep.int(1,length(liste))
ajout <- cbind(sexe,anais,couple,dip6,nb_enf,situa,classif,info_pere,info_mere, to_match,hodln)
}
enf_ailleurs <-save_inf(1)
View(enf_ailleurs)
#TODO: gerer les valeurs manquante
#TODO: s'occuper de la precision sur les statuts
save_inf <- function(i){
liste  <<- which(men[,paste0("hodln",i)] !="")
hodln <- men[liste,paste0("hodln",i)]
sexe <- character(length(liste))
# info sur l'enfant
sexe   <- men[liste,paste0("hodsex",i)]
anais  = men[liste,paste0("hodan",i)]
couple = men[liste,paste0("hodco",i)] #couple=1 et couple=2 devront etre groupes en couple=1
couple[which(couple=="2")]<-"3"
dip6   = men[liste,paste0("hodip",i)]
nb_enf = men[liste,paste0("hodenf",i)]
# son activite
situa=  1*(men[liste,paste0("hodemp",i)]==1)
+ 2*(men[liste,paste0("hodcho",i)]==3)
+ 3*(men[liste,paste0("hodcho",i)]==3)
+ 4*(men[liste,paste0("hodcho",i)]==1)
+ 5*(men[liste,paste0("hodemp",i)]==2)
+ 6*(men[liste,paste0("hodcho",i)]==2)
+ 7*(men[liste,paste0("hodcho",i)]==4)
# on verifie que hodcho est rempli seulement quand hodemp=3
classif = min(men[liste,paste0("hodniv",i)],men[liste,paste0("hodpriv",i)])
# info sur les parents
info_mere    <- matrix("",length(liste),5)
info_pere    <- matrix("",length(liste),4)
colnames(info_mere) <- c("mere","jemnais","gparmat","jemprof","jemact")
colnames(info_pere) <- c("pere","jepnais","gparpat","jepprof")
inf_pere <- function(enfants,pers) {
if (pers == "pr") {
info_pere[enfants,] <<- as.matrix(men[liste[enfants],c("idpr","anaispr","gparpr","cs42pr")])
}
if (pers == "cj") {
info_pere[enfants,] <<- as.matrix(men[liste[enfants],c("idcj","anaiscj","gparcj","cs42cj")])
}
}
inf_mere <- function(enfants,pers) {
if (pers == "pr") {
info_mere[enfants,1:4] <<- as.matrix(men[liste[enfants],c("idpr","anaispr","gparpr","cs42pr")])
}
if (pers == "cj") {
info_mere[enfants,1:4] <<- as.matrix(men[liste[enfants],c("idcj","anaiscj","gparcj","cs42cj")])
}
}
inf_pere( which(men$sexepr[liste]==1 & men[liste,paste0("hodln",i)]=="1"), "pr")
inf_mere( which(men$sexepr[liste]==1 & men[liste,paste0("hodln",i)]=="1"), "cj")
inf_pere( which(men$sexepr[liste]==2 & men[liste,paste0("hodln",i)]=="1"), "cj")
inf_mere( which(men$sexepr[liste]==2 & men[liste,paste0("hodln",i)]=="1"), "pr")
inf_pere( which(men$sexepr[liste]==1 & men[liste,paste0("hodln",i)]=="2"), "pr")
inf_mere( which(men$sexepr[liste]==2 & men[liste,paste0("hodln",i)]=="2"), "pr")
inf_pere( which(men$sexepr[liste]==1 & men[liste,paste0("hodln",i)]=="3"), "cj")
inf_mere( which(men$sexepr[liste]==2 & men[liste,paste0("hodln",i)]=="3"), "cj")
print(length(liste))
to_match = rep.int(1,length(liste))
ajout <- cbind(sexe,anais,couple,dip6,nb_enf,situa,classif,info_pere,info_mere, to_match,hodln)
}
enf_ailleurs <-save_inf(1)
View(enf_ailleurs)
?ifel
?ifelse
save_inf <- function(i){
liste  <<- which(men[,paste0("hodln",i)] !="")
hodln <- men[liste,paste0("hodln",i)]
sexe <- character(length(liste))
# info sur l'enfant
sexe   <- men[liste,paste0("hodsex",i)]
anais  = men[liste,paste0("hodan",i)]
couple = men[liste,paste0("hodco",i)] #couple=1 et couple=2 devront etre groupes en couple=1
couple[which(couple=="2")]<-"3"
dip6   = men[liste,paste0("hodip",i)]
nb_enf = men[liste,paste0("hodenf",i)]
# son activite
situa=  1*(men[liste,paste0("hodemp",i)]==1)
+ 2*(men[liste,paste0("hodcho",i)]==3)
+ 3*(men[liste,paste0("hodcho",i)]==3)
+ 4*(men[liste,paste0("hodcho",i)]==1)
+ 5*(men[liste,paste0("hodemp",i)]==2)
+ 6*(men[liste,paste0("hodcho",i)]==2)
+ 7*(men[liste,paste0("hodcho",i)]==4)
# on verifie que hodcho est rempli seulement quand hodemp=3
classif = ifelse(men[liste,paste0("hodniv",i)] %in% c("1","2","3") ,men[liste,paste0("hodniv",i)] , men[liste,paste0("hodpriv",i)])
# info sur les parents
info_mere    <- matrix("",length(liste),5)
info_pere    <- matrix("",length(liste),4)
colnames(info_mere) <- c("mere","jemnais","gparmat","jemprof","jemact")
colnames(info_pere) <- c("pere","jepnais","gparpat","jepprof")
inf_pere <- function(enfants,pers) {
if (pers == "pr") {
info_pere[enfants,] <<- as.matrix(men[liste[enfants],c("idpr","anaispr","gparpr","cs42pr")])
}
if (pers == "cj") {
info_pere[enfants,] <<- as.matrix(men[liste[enfants],c("idcj","anaiscj","gparcj","cs42cj")])
}
}
inf_mere <- function(enfants,pers) {
if (pers == "pr") {
info_mere[enfants,1:4] <<- as.matrix(men[liste[enfants],c("idpr","anaispr","gparpr","cs42pr")])
}
if (pers == "cj") {
info_mere[enfants,1:4] <<- as.matrix(men[liste[enfants],c("idcj","anaiscj","gparcj","cs42cj")])
}
}
inf_pere( which(men$sexepr[liste]==1 & men[liste,paste0("hodln",i)]=="1"), "pr")
inf_mere( which(men$sexepr[liste]==1 & men[liste,paste0("hodln",i)]=="1"), "cj")
inf_pere( which(men$sexepr[liste]==2 & men[liste,paste0("hodln",i)]=="1"), "cj")
inf_mere( which(men$sexepr[liste]==2 & men[liste,paste0("hodln",i)]=="1"), "pr")
inf_pere( which(men$sexepr[liste]==1 & men[liste,paste0("hodln",i)]=="2"), "pr")
inf_mere( which(men$sexepr[liste]==2 & men[liste,paste0("hodln",i)]=="2"), "pr")
inf_pere( which(men$sexepr[liste]==1 & men[liste,paste0("hodln",i)]=="3"), "cj")
inf_mere( which(men$sexepr[liste]==2 & men[liste,paste0("hodln",i)]=="3"), "cj")
print(length(liste))
to_match = rep.int(1,length(liste))
ajout <- cbind(sexe,anais,couple,dip6,nb_enf,situa,classif,info_pere,info_mere, to_match,hodln)
}
enf_ailleurs <- save_inf(1)
x <- c(6:-4)
sqrt(x)  #- gives warning
sqrt(ifelse(x >= 0, x, NA))  # no warning
## Note: the following also gives the warning !
ifelse(x >= 0, sqrt(x), NA)
sqrt(ifelse(x >= 0, x, 0))  # no warning
ifelse( men[liste,paste0("hodpriv",i)] %in% c("1","2","3"),  men[liste,paste0("hodpriv",i)],  men[liste,paste0("hodniv",i)])
men[liste,paste0("hodpriv",i)] %in% c("1","2","3")
ifelse( men[liste,paste0("hodpriv",1)] %in% c("1","2","3"),  men[liste,paste0("hodpriv",1)],  men[liste,paste0("hodniv",1)])
men[liste,paste0("hodpriv",1)] %in% c("1","2","3")
men[liste,paste0("hodpriv",1)]
names(men)
ifelse( men[liste,paste0("hodpri",1)] %in% c("1","2","3"),  men[liste,paste0("hodpri",1)],  men[liste,paste0("hodniv",1)])
ifelse( men[liste,paste0("hodpri",1)] %in% c("1","2","3","4"),  men[liste,paste0("hodpri",1)],  men[liste,paste0("hodniv",1)])
#TODO: gerer les valeurs manquante
#TODO: s'occuper de la precision sur les statuts
save_inf <- function(i){
liste  <<- which(men[,paste0("hodln",i)] !="")
hodln <- men[liste,paste0("hodln",i)]
sexe <- character(length(liste))
# info sur l'enfant
sexe   <- men[liste,paste0("hodsex",i)]
anais  = men[liste,paste0("hodan",i)]
couple = men[liste,paste0("hodco",i)] #couple=1 et couple=2 devront etre groupes en couple=1
couple[which(couple=="2")]<-"3"
dip6   = men[liste,paste0("hodip",i)]
nb_enf = men[liste,paste0("hodenf",i)]
# son activite
situa=  1*(men[liste,paste0("hodemp",i)]==1)
+ 2*(men[liste,paste0("hodcho",i)]==3)
+ 3*(men[liste,paste0("hodcho",i)]==3)
+ 4*(men[liste,paste0("hodcho",i)]==1)
+ 5*(men[liste,paste0("hodemp",i)]==2)
+ 6*(men[liste,paste0("hodcho",i)]==2)
+ 7*(men[liste,paste0("hodcho",i)]==4)
# on verifie que hodcho est rempli seulement quand hodemp=3
classif = ifelse( men[liste,paste0("hodpri",i)] %in% c("1","2","3","4"),
men[liste,paste0("hodpri",i)],
men[liste,paste0("hodniv",i)])
# info sur les parents
info_mere    <- matrix("",length(liste),5)
info_pere    <- matrix("",length(liste),4)
colnames(info_mere) <- c("mere","jemnais","gparmat","jemprof","jemact")
colnames(info_pere) <- c("pere","jepnais","gparpat","jepprof")
inf_pere <- function(enfants,pers) {
if (pers == "pr") {
info_pere[enfants,] <<- as.matrix(men[liste[enfants],c("idpr","anaispr","gparpr","cs42pr")])
}
if (pers == "cj") {
info_pere[enfants,] <<- as.matrix(men[liste[enfants],c("idcj","anaiscj","gparcj","cs42cj")])
}
}
inf_mere <- function(enfants,pers) {
if (pers == "pr") {
info_mere[enfants,1:4] <<- as.matrix(men[liste[enfants],c("idpr","anaispr","gparpr","cs42pr")])
}
if (pers == "cj") {
info_mere[enfants,1:4] <<- as.matrix(men[liste[enfants],c("idcj","anaiscj","gparcj","cs42cj")])
}
}
inf_pere( which(men$sexepr[liste]==1 & men[liste,paste0("hodln",i)]=="1"), "pr")
inf_mere( which(men$sexepr[liste]==1 & men[liste,paste0("hodln",i)]=="1"), "cj")
inf_pere( which(men$sexepr[liste]==2 & men[liste,paste0("hodln",i)]=="1"), "cj")
inf_mere( which(men$sexepr[liste]==2 & men[liste,paste0("hodln",i)]=="1"), "pr")
inf_pere( which(men$sexepr[liste]==1 & men[liste,paste0("hodln",i)]=="2"), "pr")
inf_mere( which(men$sexepr[liste]==2 & men[liste,paste0("hodln",i)]=="2"), "pr")
inf_pere( which(men$sexepr[liste]==1 & men[liste,paste0("hodln",i)]=="3"), "cj")
inf_mere( which(men$sexepr[liste]==2 & men[liste,paste0("hodln",i)]=="3"), "cj")
print(length(liste))
to_match = rep.int(1,length(liste))
ajout <- cbind(sexe,anais,couple,dip6,nb_enf,situa,classif,info_pere,info_mere, to_match,hodln)
}
enf_ailleurs <- save_inf(1)
for (k in 2:12) {
enf_ailleurs <- rbind(enf_ailleurs,save_inf(k))
}
View(enf_ailleurs)
i=1
1*(men[liste,paste0("hodemp",i)]==1)
men[liste,paste0("hodemp",i)]
1*(men[liste,paste0("hodemp",i)]==1)
+ 2*(men[liste,paste0("hodcho",i)]==3)
+ 3*(men[liste,paste0("hodcho",i)]==3)
+ 4*(men[liste,paste0("hodcho",i)]==1)
+ 5*(men[liste,paste0("hodemp",i)]==2)
+ 6*(men[liste,paste0("hodcho",i)]==2)
+ 7*(men[liste,paste0("hodcho",i)]==4)
situa=1*(men[liste,paste0("hodemp",i)]==1)+
2*(men[liste,paste0("hodcho",i)]==3)+
3*(men[liste,paste0("hodcho",i)]==3)+
4*(men[liste,paste0("hodcho",i)]==1)+
5*(men[liste,paste0("hodemp",i)]==2)+
6*(men[liste,paste0("hodcho",i)]==2)+
7*(men[liste,paste0("hodcho",i)]==4)
situa
View(enf_ailleurs)
#TODO: gerer les valeurs manquante
#TODO: s'occuper de la precision sur les statuts
save_inf <- function(i){
liste  <<- which(men[,paste0("hodln",i)] !="")
hodln <- men[liste,paste0("hodln",i)]
sexe <- character(length(liste))
# info sur l'enfant
sexe   <- men[liste,paste0("hodsex",i)]
anais  = men[liste,paste0("hodan",i)]
couple = men[liste,paste0("hodco",i)] #couple=1 et couple=2 devront etre groupes en couple=1
couple[which(couple=="2")]<-"3"
dip6   = men[liste,paste0("hodip",i)]
nb_enf = men[liste,paste0("hodenf",i)]
# son activite
situa=  1*(men[liste,paste0("hodemp",i)]==1) +
2*(men[liste,paste0("hodcho",i)]==3) +
3*(men[liste,paste0("hodcho",i)]==3) +
4*(men[liste,paste0("hodcho",i)]==1) +
5*(men[liste,paste0("hodemp",i)]==2) +
6*(men[liste,paste0("hodcho",i)]==2) +
7*(men[liste,paste0("hodcho",i)]==4)
# on verifie que hodcho est rempli seulement quand hodemp=3
classif = ifelse( men[liste,paste0("hodpri",i)] %in% c("1","2","3","4"),
men[liste,paste0("hodpri",i)],
men[liste,paste0("hodniv",i)])
# info sur les parents
info_mere    <- matrix("",length(liste),5)
info_pere    <- matrix("",length(liste),4)
colnames(info_mere) <- c("mere","jemnais","gparmat","jemprof","jemact")
colnames(info_pere) <- c("pere","jepnais","gparpat","jepprof")
inf_pere <- function(enfants,pers) {
if (pers == "pr") {
info_pere[enfants,] <<- as.matrix(men[liste[enfants],c("idpr","anaispr","gparpr","cs42pr")])
}
if (pers == "cj") {
info_pere[enfants,] <<- as.matrix(men[liste[enfants],c("idcj","anaiscj","gparcj","cs42cj")])
}
}
inf_mere <- function(enfants,pers) {
if (pers == "pr") {
info_mere[enfants,1:4] <<- as.matrix(men[liste[enfants],c("idpr","anaispr","gparpr","cs42pr")])
}
if (pers == "cj") {
info_mere[enfants,1:4] <<- as.matrix(men[liste[enfants],c("idcj","anaiscj","gparcj","cs42cj")])
}
}
inf_pere( which(men$sexepr[liste]==1 & men[liste,paste0("hodln",i)]=="1"), "pr")
inf_mere( which(men$sexepr[liste]==1 & men[liste,paste0("hodln",i)]=="1"), "cj")
inf_pere( which(men$sexepr[liste]==2 & men[liste,paste0("hodln",i)]=="1"), "cj")
inf_mere( which(men$sexepr[liste]==2 & men[liste,paste0("hodln",i)]=="1"), "pr")
inf_pere( which(men$sexepr[liste]==1 & men[liste,paste0("hodln",i)]=="2"), "pr")
inf_mere( which(men$sexepr[liste]==2 & men[liste,paste0("hodln",i)]=="2"), "pr")
inf_pere( which(men$sexepr[liste]==1 & men[liste,paste0("hodln",i)]=="3"), "cj")
inf_mere( which(men$sexepr[liste]==2 & men[liste,paste0("hodln",i)]=="3"), "cj")
print(length(liste))
to_match = rep.int(1,length(liste))
ajout <- cbind(sexe,anais,couple,dip6,nb_enf,situa,classif,info_pere,info_mere, to_match,hodln)
}
enf_ailleurs <- save_inf(1)
for (k in 2:12) {
enf_ailleurs <- rbind(enf_ailleurs,save_inf(k))
}
View(enf_ailleurs)
cherche_parent[which(cherche_parent[,"classif"] %in% c("1","2","3")),"classif"] <- "a"
cherche_parent[which(cherche_parent[,"classif"] %in% c("4","5")),"classif"] <- "2"
cherche_parent[which(cherche_parent[,"classif"] %in% c("6","7")),"classif"] <- "1"
cherche_parent[which(cherche_parent[,"classif"] %in% c("8","9")),"classif"] <- "3"
cherche_parent[which(cherche_parent[,"classif"] %in% c("a")),"classif"] <- "4"
which(cherche_parent[,"classif"] %in% c("a"))
#### info sur les parents
cherche_parent <- as.matrix(subset(ind, per1e == "2" | mer1e == "2",
select= c(id,sexe,anais,couple,dip14,situa,jemnais,gparmat,jemprof,jemact,
jepnais,gparpat,jepprof,per1e,mer1e,jegrave_div,classif)))
# on supprime les infos quand on ne cherche pas ce parent
pas_pere <- which(cherche_parent[,"per1e"] %in% c("1","3","4") )
cherche_parent[pas_pere,c("jepnais","gparpat","jepprof")] <- NA
pas_mere <- which(cherche_parent[,"mer1e"] %in% c("1","3","4") )
cherche_parent[pas_mere,c("jemnais","gparmat","jemprof","jemact")] <- NA
rm(pas_pere,pas_mere)
#  hodind=substr(acti,1,1)
#   if (hodind==4 & statut!=6) {hodind=5}
dip6 = character(nrow(cherche_parent))
dip6[] <- "6"
dip6[which(cherche_parent[,"dip14"]>=30)]  <- "5"
dip6[which(cherche_parent[,"dip14"]>=41)]  <- "4"
dip6[which(cherche_parent[,"dip14"]>=43)]  <- "3"
dip6[which(cherche_parent[,"dip14"]>=50)]  <- "2"
dip6[which(cherche_parent[,"dip14"]>=60)]  <- "1"
to_match = rep.int(0,nrow(cherche_parent))
cherche_parent[which(cherche_parent[,"classif"] %in% c("1","2","3")),"classif"] <- "a"
cherche_parent[which(cherche_parent[,"classif"] %in% c("4","5")),"classif"] <- "2"
cherche_parent[which(cherche_parent[,"classif"] %in% c("6","7")),"classif"] <- "1"
cherche_parent[which(cherche_parent[,"classif"] %in% c("8","9")),"classif"] <- "3"
cherche_parent[which(cherche_parent[,"classif"] %in% c("a")),"classif"] <- "4"
cherche_parent <- subset(cherche_parent,select=-c(dip14))
cherche_parent <- cbind(cherche_parent,dip6,to_match,nb_enf[which(per1e == "2" | mer1e == "2")])
colnames(cherche_parent)[which(colnames(cherche_parent)=="")] <- "nb_enf"
library(plyr)
lien = rbind.fill.matrix(cherche_parent,enf_ailleurs)
lien[16025:16100,]
JEGRAVE_DIV==1 alors on cherche parmi HODLN=2 ou HODLN=3
install.packages("h5r")
library(h5r)
?h5r
?writeH5Data
writeH5Data(h5Obj, data, offsets, extents)
writeH5Data(h5Obj, lien, offsets, extents)
writeH5Data("h5Obj", lien, offsets, extents)
f <- system.file("h5_files", "ex_1.h5", package = "h5r")
f
user <- "IFS"
## AE
if (user=="AE_port"){
chem_patr <-"M:/data/Patrimoine/EP 2009-10/Stata/"
}
if (user=="IPP"){
chem_patr <-"M:/Patrimoine/EP 2009-10/Stata/"
}
if (user=="IFS"){
chem_patr <-"T:/data/Patrimoine/EP 2009-10/Stata/"
}
f <- system.file("h5_files", "ex_1.h5")
f
?sys.source
?system.file
f
f <- paste0(dest,"lien.h5")
user <- "IFS"
## AE
if (user=="AE_port"){
chem_patr <-"M:/data/Patrimoine/EP 2009-10/Stata/"
}
if (user=="IPP"){
chem_patr <-"M:/Patrimoine/EP 2009-10/Stata/"
}
if (user=="IFS"){
chem_patr <-"T:/data/Patrimoine/EP 2009-10/Stata/"
dest <-"T:/Myliam2/Patrimoine/"
}
f <- paste0(dest,"lien.h5")
f
h5 <- H5File(f)
install.packages("C:/Users/alexis_e/Downloads/hdf5_1.6.9.tar.gz", repos = NULL, type = "source")
install.packages("reshape")
###############  BIOS DESTINIE  ******************
#Il reste une question sur l'age; est-ce qu'il faut le prendre <0 ou <=0 ?
# Extraction des biographie individuelle (liens familiaux, statuts, salaire) de la base de Destinie 2009.
# Programmes conjoint et statut dans P:\Retraites\Destinie\VersR
# source("P:/Retraites/PENSIPP 0.0/Modèle/Outils/OutilsRetraite/OutilsMS.R")
# source("P:/Retraites/PENSIPP 0.0/Modèle/Outils/OutilsRetraite/OutilsDestinie.R")
#setwd("C:/Users/a.eidelman/Desktop/GenIPP_Pyth/liam/Patrimoine/data/")
#setwd("M:/Myliam2/Patrimoine/data/")
setwd("T:/Myliam2/Patrimoine/data/")
debut        <- 1900
t_deb        <- 109
t_fin        <- 160
# Lecture donnÃ©es d'Ã©tat initial (NB : le tableau intermÃ©diaire buf est lu sous forme de dataframe
# et immÃ©diatement converti en type matrix, ce qui est nÃ©cessaire pour l'extraction de la
# sous-matrice des identifiants des enfants)
buf                          <- read.csv2("init/pop.csv",header=FALSE)
dimnames(buf)[[2]] <- c("id","period","age","sexe","findet","pere","mere","n_enf","enf1","enf2","enf3","enf4","enf5","enf6")
#on retire les enf puisque seules les variables pere et mere vont nous être utiles
person_sta <- subset(buf, select=-c(n_enf,enf1,enf2,enf3,enf4,enf5,enf6))
n <- nrow(buf)
person_sta[,2] <- rep.int(2009,n)
#on passe de la date de naissance à l'age
person_sta[,3] <- 2009 - (1900+person_sta[,3])
#write.table(person_sta,file="person_sta.csv",sep=",",row.names=F)
# Lecture carriÃ¨res et biographies matrimoniales
library(reshape)
buf                          <- read.csv2("init/biosta.csv",header=FALSE)
n                            <- nrow(buf)
print (c(n," individus lus dans BioSta.csv"))
buf = subset(buf, ! as.vector(buf$V1)  %in% as.vector(person_sta[which(person_sta$age<0),]$id))
# Decede quands plus de statut
buf[is.na(buf) | (buf<0) ]<- 0
colnames(buf)<-c("id",seq(debut,debut+t_fin))
statut=melt(buf[,],id="id")
colnames(statut)[2:3] <- c("period","statut")
buf                          <- read.csv2("init/biosal4.csv",header=FALSE)
n                            <- nrow(buf)
print (c(n," individus lus dans BioSal4.csv"))
buf = subset(buf, ! as.vector(buf$V1)  %in% as.vector(person_sta[which(person_sta$age<0),]$id))
# =0 quands plus de statut
buf[is.na(buf)]<- 0
colnames(buf)<-c("id",seq(debut,debut+t_fin))
salaires=melt(buf[,],id="id")
colnames(salaires)[2:3] <- c("period","salaires")
buf                        <- read.csv2("init/biomat4.csv",header=FALSE)
n                          <- nrow(buf)
print (c(n," individus lus dans BioMat4.csv"))
buf = subset(buf, ! as.vector(buf$V1)  %in% as.vector(person_sta[which(person_sta$age<0),]$id))
buf[is.na(buf)]<- 0
colnames(buf)<-c("id",seq(debut,debut+t_fin))
conjoint=melt(buf[,],id="id")
colnames(conjoint)[2:3] <- c("period","conjoint")
person=cbind(conjoint,salaires,statut)[,c("id","period","conjoint","salaires","statut")]
rm(buf,conjoint,salaires,statut)
gc()
write.csv(person,file="person_2060.csv",row.names=F)
PersonPast = subset(person, ! period %in% c(2009+seq(2010:2060)))
write.csv(PersonPast,file="person.csv",row.names=F)
####### table 2009 ######
person2009 <- subset( person, period==2009)
person_sta = subset(person_sta, ! as.vector(person_sta$id)  %in% as.vector(person_sta[which(person_sta$age<0),]$id))
person2009 <- merge( person2009,person_sta, by=c("id","period"),sort = F)
person2009 <- subset( person2009, age>0)
# on invente des ménages, à l'instinct.
person2009$res<-seq(1:nrow(person2009))
person2009$res[which(person2009$conjoint < person2009$id & person2009$conjoint >0 )] <- person2009$res[person2009$conjoint[which(person2009$conjoint < person2009$id & person2009$conjoint >0 )]]
person2009$res[which(person2009$mere>0 & person2009$conjoint<0 & person2009$age <25)]<-person2009$res[person2009$mere[which(person2009$mere>0 & person2009$conjoint<0  & person2009$age <25)]]
#et puisqu'on est là, on écrit aussi un table menage dont on a besoin :
men <- as.matrix(unique(person2009$res))
men <- cbind(men,rep.int(2009,nrow(men)))
colnames(men) <- c("id","period")
write.csv(men,file="menage2009.csv",row.names=F)
write.csv(person2009,file="person2009.csv",row.names=F)
rep.int(2009,nrow(men))
??random
pond <- rep.int(50,nrow(men))
men  <- as.matrix(unique(person2009$res))
pond
pond <- runif(nrow(men))
pond
pond <- 50+runif(nrow(men))*20000
min(pond)
max(pond)
men  <- cbind(men,rep.int(2009,nrow(men)),pond)
write.csv(men,file="menage2009.csv",row.names=F)
colnames(men) <- c("id","period","pond")
View(men)
write.csv(men,file="menage2009.csv",row.names=F)
