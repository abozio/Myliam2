# This is a "simulation" file. To run the simulation, press F6 in liam2
# environment, or run the following command in a console:
# INSTALL PATH\liam2 run demo02.yml

# This example builds upon the first one and introduces a few additional
# features: a second entity, links and one of their associated functions
# (countlink), procedures with local variables, an init procedure and the choice
# function.
entities:
    household:
        fields:
            # period and id are implicit
            - nb_persons:  {type: int, initialdata: false}
            - nb_children: {type: int, initialdata: false}
            - region_id:   {type: int, initialdata: false}

        links:
            persons: {type: one2many, target: person, field: hh_id}

        processes:
            # init_region_id is a procedure (it contains another process)
            init_region_id:
                # region_id is set randomly, with a 10% probability to be 0,
                # a 20% probability to be 1, etc.
                - region_id: choice([0, 1, 2, 3], [0.1, 0.2, 0.3, 0.4])

            household_composition:
                - nb_persons: countlink(persons)
                - nb_children: countlink(persons, age < 18)

    person:
        fields:
            # period and id are implicit
            - age:    int
            - gender: bool

            # link fields
            - mother_id:  int
            - hh_id:      int

            # fields not present in input
            - agegroup: {type: int, initialdata: false}

        links:
            mother: {type: many2one, target: person, field: mother_id}
            children: {type: one2many, target: person, field: mother_id}
            household: {type: many2one, target: household, field: hh_id}

        # possible transitions and regressions. The actual list used in the
        # simulation must be defined below
        processes:
            ageing:
                - age: age + 1

                # juniors and plus50 are local variables. This means they are
                # only useable within the ageing procedure. As we have seen
                # in the first example this could just as well be written using
                # a single process (without using local variables).
                - juniors: 5 * trunc(age / 5)
                - plus50: 10 * trunc(age / 10)
                - agegroup: if(age < 50, juniors, plus50)

            # * dump is not limited to simple columns, it can evaluate any
            #   expression in place
            # * one can easily get the value of a linked object by using
            #   "linkname.variable_name"
            # * the suffix argument can be used to customize the name of the
            #   csv file. It uses this pattern: <entity>_<period>_<suffix>.csv
            dump_info: csv(dump(id, age, gender, hh_id, household.nb_persons,
                                mother.age), suffix='info')
            show_demography: show(groupby(agegroup, gender))

simulation:
    init:
        - household: [init_region_id]

    processes:
        - household: [household_composition]
        - person: [ageing, dump_info, show_demography]

    input:
        file: simple2001.h5
    output:
        file: simulation.h5

    start_period: 2002
    periods: 2
