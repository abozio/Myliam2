# This is a "simulation" file. To run the simulation, press F6 in liam2
# environment, or run the following command in a console:
# INSTALL PATH\liam2 run demo04.yml

# In this example, we will add a simple marriage process to our model and model
# the civil status of persons. We also demonstrate the following additional
# features: the matching() function, how to create new links, how to change or
# break existing links, the abs() function and the new() function used with a
# different entity.
entities:
    household:
        fields:
            # period and id are implicit
            - nb_persons:  {type: int, initialdata: false}
            - nb_children: {type: int, initialdata: false}
            - region_id:   {type: int, initialdata: false}

        links:
            persons: {type: one2many, target: person, field: hh_id}

        processes:
            init_region_id:
                - region_id: choice([0, 1, 2, 3], [0.1, 0.2, 0.3, 0.4])

            household_composition:
                - nb_persons: countlink(persons)
                - nb_children: countlink(persons, age < 18)

            clean_empty: 
                - show('empty hh', grpcount(nb_persons == 0))
                - remove(nb_persons == 0)

    person:
        fields:
            # period and id are implicit
            - age:        int
            - gender:     bool
            # 1: single, 2: married, 3: divorced, 4: widowed
            - civilstate: int
            - dur_in_couple: int

            # link fields
            - mother_id:  int
            - partner_id: int
            - hh_id:      int

            # fields not present in input
            - agegroup_civilstate: {type: int, initialdata: false}

        links:
            mother: {type: many2one, target: person, field: mother_id}
            partner: {type: many2one, target: person, field: partner_id}
            household: {type: many2one, target: household, field: hh_id}
            children: {type: one2many, target: person, field: mother_id}

        macros:
            MALE: True
            FEMALE: False
            ISMALE: gender
            ISFEMALE: not gender

            UNSET: -1

            SINGLE: 1
            MARRIED: 2
            DIVORCED: 3
            WIDOW: 4
            ISSINGLE: civilstate == 1
            ISMARRIED: civilstate == 2
            ISDIVORCED: civilstate == 3
            ISWIDOW: civilstate == 4

        # possible transitions and regressions. The actual list used in the
        # simulation must be defined below
        processes:
            ageing:
                - age: age + 1
                - agegroup_civilstate: if(age < 50,
                                          5 * trunc(age / 5),
                                          10 * trunc(age / 10))

            death:
                - dead: if(ISMALE,
                           logit_regr(0.0, align='al_p_dead_m.csv'),
                           logit_regr(0.0, align='al_p_dead_f.csv'))
                - civilstate: if(partner.dead, WIDOW, civilstate)
                
                # We break the link to the partner: the "partner" link is no
                # longer valid for the concerned individuals after this point.
                - partner_id: if(partner.dead, UNSET, partner_id)
                - show('Avg age of dead men',
                       grpavg(age, filter=dead and ISMALE))
                - show('Avg age of dead women',
                       grpavg(age, filter=dead and ISFEMALE))
                - show('Widows', grpcount(ISWIDOW))
                - remove(dead)

            birth:
                - to_give_birth: logit_regr(0.0,
                                            filter=ISFEMALE and (age >= 15) and (age <= 50),
                                            align='al_p_birth.csv')
                - new('person', filter=to_give_birth,
                      mother_id = id,
                      hh_id = hh_id,
                      age = 0,
                      partner_id = UNSET,
                      civilstate = SINGLE,
                      gender = choice([MALE, FEMALE], [0.51, 0.49]))

            marriage:
                # aligned on agegroup_civilstate, civilstate
                - to_couple: if((age >= 18) and (age <= 90) and not ISMARRIED,
                                if(ISMALE,
                                   logit_regr(0.0, align='al_p_mmkt_m.csv'),
                                   logit_regr(0.0, align='al_p_mmkt_f.csv')),
                                False)
                - difficult_match: if(to_couple and ISFEMALE,
                                      abs(age - grpavg(age, filter=to_couple and ISMALE)),
                                      nan)
                - partner_id: if(to_couple,
                                 matching(set1filter=ISFEMALE, set2filter=ISMALE,
                                          score=- 0.4893 * other.age
                                                + 0.0131 * other.age ** 2
                                                - 0.0001 * other.age ** 3
                                                + 0.0467 * (other.age - age)
                                                - 0.0189 * (other.age - age) ** 2
                                                + 0.0003 * (other.age - age) ** 3,
                                          orderby=difficult_match),
                                 partner_id)
                - justcoupled: to_couple and (partner_id != UNSET)
                - newhousehold: new('household', filter=justcoupled and ISFEMALE,
                                    region_id=choice([0, 1, 2, 3], [0.1, 0.2, 0.3, 0.4]))

                - hh_id: if(justcoupled,
                            if(ISMALE, partner.newhousehold, newhousehold),
                            hh_id)

                - civilstate: if(justcoupled, MARRIED, civilstate)
                - dur_in_couple: if(justcoupled,
                                    0,
                                    if(ISMARRIED, dur_in_couple + 1, 0))
                - csv(dump(id, age, gender, partner.id, partner.age,
                           partner.gender, hh_id, filter=justcoupled),
                      suffix='new_couples')

            dump_info: csv(dump(id, age, gender, hh_id, household.nb_persons,
                                mother.age, partner.age), suffix='info')

simulation:
    init:
        - household: [init_region_id]

    processes:
        - person: [ageing, death, birth, marriage]
        - household: [household_composition, clean_empty]

    input:
        file: simple2001.h5
    output:
        file: simulation.h5

    start_period: 2002
    periods: 2
    default_entity: person
