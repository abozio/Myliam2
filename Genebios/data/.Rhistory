warning("There more recipients than donors!")
cat("some donors will be used more than once", fill=TRUE)
r.sig <- rep("==", nr)
r.rhs <- rep(1, nr)
c.sig <- rep(">=", nd)
c.rhs <- rep(1, nd)
appo <- lp.transport(cost.mat=mdist, row.signs=r.sig, row.rhs=r.rhs, col.signs=c.sig, col.rhs=c.rhs)
}
sol <- appo$solution
ss <- c(t(sol))
cc <- c(t(col(sol)))
dist.rd <- mdist[cbind(1:nr, cc[as.logical(ss)] )]
rec.lab <- r.lab
don.lab <- d.lab[c(cc[as.logical(ss)])]
}
# the function solve_LSAP() in package clue is used
if(constr && (c.alg=="Hungarian" || c.alg=="hungarian")){
if(nr > nd) stop("It is required that no. of donors is greater \n or equal than the no. of recipients")
sol <- solve_LSAP(x=mdist, maximum=FALSE)
rec.lab <- r.lab
don.lab <- d.lab[as.integer(sol)]
dist.rd <- mdist[cbind(rec.lab, don.lab)]
#output
mtc.ids <- cbind(rec.id=rec.lab, don.id=don.lab)
if(constr) fine <- list(mtc.ids=mtc.ids, dist.rd=dist.rd, call=match.call())
else fine <- list(mtc.ids=mtc.ids, dist.rd=dist.rd, call=match.call())
fine
}
}
################ NND.hd ends here #############################
out <- NND.hd(rec=data.rec, don=data.don, dfun=dist.fun, constr=constrained, c.alg=constr.alg )
NND.hd <- function (rec, don, dfun="Manhattan", constr=FALSE, c.alg=NULL, ...)
{
nr <- nrow(rec)
nd <- nrow(don)
r.name <- row.names(rec)
d.name <- row.names(don)
mdist <- matrix(0,nr,nd,dimnames=list(r.name,d.name))
for (name in match.vars) {
x.rec <- as.matrix(subset(rec,select=name))
x.don <- as.matrix(subset(don,select=name))
x.rec <- matrix(rep(as.numeric(x.rec), nd), ncol=  nd)
x.don <- t(matrix(rep(as.numeric(x.don), nr), ncol=  nr))
mdist.temp  <-  (x.rec-x.don) * (x.rec-x.don)
norm        <- apply(mdist.temp,1,sum)
norm[is.na(norm)] <- 1 ;    norm[norm==0] <- 1
mdist.temp  <-  mdist.temp/norm  # la somme de chaque ligne vaut 1
#sum(mdist.temp)
mdist = mdist+ mdist.temp   # il manque d'ajouter un vecteur de poid relatif ici.
}
#added by Alexis
if(dist.carr){
carr.rec <- as.matrix(subset(rec,select=date.carr))
carr.don <- as.matrix(subset(don,select=date.carr))
mdist.car      <- as.matrix(my.dist(carr.rec,carr.don))
norm        <- apply(mdist.car,1,sum)
norm[is.na(norm)] <- 1 ;    norm[norm==0] <- 1
mdist.car  <-  mdist.car/norm  # la somme de chaque ligne vaut 1
mdist <- mdist+5*mdist.car  #je mets ici un poids 5 arbitraire, il faudrait le sortir et le mettre en option...
}
# UNCONSTRAINED nearest neighbour matching
if(!constr){
dist.rd <- numeric(nr)
nad <- rep(NA, nr)
don.lab <- numeric(nr)
for(i in 1:nr){
vd <- mdist[i,]
if(all(is.na(vd))) stop("All the distances are NA \n this is due to the presence of NA in the \n matching variables")
min.d <- min(vd) # smallest distance recipient-donor
dist.rd[i] <- min.d
appo <- d.lab[vd==min.d]
nad[i] <- length(appo) # number of availabe donors
if(length(appo)==1) don.lab[i] <- appo
else don.lab[i] <- sample(appo, 1)
}
rec.lab <- r.lab
}
# CONSTRAINED nearest neighbour matching.
# the functions in library lpSolve are used
if(constr && (c.alg=="lpSolve" || c.alg=="lpsolve")){
if(nr==nd) appo <- lp.assign(cost.mat=mdist)
else if(nr<nd){
r.sig <- rep("==", nr)
r.rhs <- rep(1, nr)
c.sig <- rep("<=", nd)
c.rhs <- rep(1, nd)
appo <- lp.transport(cost.mat=mdist, row.signs=r.sig, row.rhs=r.rhs, col.signs=c.sig, col.rhs=c.rhs)
}
else if(nr > nd){
warning("There more recipients than donors!")
cat("some donors will be used more than once", fill=TRUE)
r.sig <- rep("==", nr)
r.rhs <- rep(1, nr)
c.sig <- rep(">=", nd)
c.rhs <- rep(1, nd)
appo <- lp.transport(cost.mat=mdist, row.signs=r.sig, row.rhs=r.rhs, col.signs=c.sig, col.rhs=c.rhs)
}
sol <- appo$solution
ss <- c(t(sol))
cc <- c(t(col(sol)))
dist.rd <- mdist[cbind(1:nr, cc[as.logical(ss)] )]
rec.lab <- r.lab
don.lab <- d.lab[c(cc[as.logical(ss)])]
}
# the function solve_LSAP() in package clue is used
if(constr && (c.alg=="Hungarian" || c.alg=="hungarian")){
if(nr > nd) stop("It is required that no. of donors is greater \n or equal than the no. of recipients")
sol <- solve_LSAP(x=mdist, maximum=FALSE)
rec.lab <- r.lab
don.lab <- d.lab[as.integer(sol)]
dist.rd <- mdist[cbind(rec.lab, don.lab)]
#output
mtc.ids <- cbind(rec.id=rec.lab, don.id=don.lab)
if(constr) fine <- list(mtc.ids=mtc.ids, dist.rd=dist.rd, call=match.call())
else fine <- list(mtc.ids=mtc.ids, dist.rd=dist.rd, call=match.call())
fine
}
}
################ NND.hd ends here #############################
out <- NND.hd(rec=data.rec, don=data.don, dfun=dist.fun, constr=constrained, c.alg=constr.alg )
mtc.ids[[h]] <<- out$mtc.ids
NND.hd <- function (rec, don, dfun="Manhattan", constr=FALSE, c.alg=NULL, ...)
{
nr <- nrow(rec)
nd <- nrow(don)
r.name <- row.names(rec)
d.name <- row.names(don)
mdist <- matrix(0,nr,nd,dimnames=list(r.name,d.name))
for (name in match.vars) {
x.rec <- as.matrix(subset(rec,select=name))
x.don <- as.matrix(subset(don,select=name))
x.rec <- matrix(rep(as.numeric(x.rec), nd), ncol=  nd)
x.don <- t(matrix(rep(as.numeric(x.don), nr), ncol=  nr))
mdist.temp  <-  (x.rec-x.don) * (x.rec-x.don)
norm        <- apply(mdist.temp,1,sum)
norm[is.na(norm)] <- 1 ;    norm[norm==0] <- 1
mdist.temp  <-  mdist.temp/norm  # la somme de chaque ligne vaut 1
#sum(mdist.temp)
mdist = mdist+ mdist.temp   # il manque d'ajouter un vecteur de poid relatif ici.
}
#added by Alexis
if(dist.carr){
carr.rec <- as.matrix(subset(rec,select=date.carr))
carr.don <- as.matrix(subset(don,select=date.carr))
mdist.car      <- as.matrix(my.dist(carr.rec,carr.don))
norm        <- apply(mdist.car,1,sum)
norm[is.na(norm)] <- 1 ;    norm[norm==0] <- 1
mdist.car  <-  mdist.car/norm  # la somme de chaque ligne vaut 1
mdist <- mdist+5*mdist.car  #je mets ici un poids 5 arbitraire, il faudrait le sortir et le mettre en option...
}
# UNCONSTRAINED nearest neighbour matching
if(!constr){
dist.rd <- numeric(nr)
nad <- rep(NA, nr)
don.lab <- numeric(nr)
for(i in 1:nr){
vd <- mdist[i,]
if(all(is.na(vd))) stop("All the distances are NA \n this is due to the presence of NA in the \n matching variables")
min.d <- min(vd) # smallest distance recipient-donor
dist.rd[i] <- min.d
appo <- d.lab[vd==min.d]
nad[i] <- length(appo) # number of availabe donors
if(length(appo)==1) don.lab[i] <- appo
else don.lab[i] <- sample(appo, 1)
}
rec.lab <- r.lab
}
# CONSTRAINED nearest neighbour matching.
# the functions in library lpSolve are used
if(constr && (c.alg=="lpSolve" || c.alg=="lpsolve")){
if(nr==nd) appo <- lp.assign(cost.mat=mdist)
else if(nr<nd){
r.sig <- rep("==", nr)
r.rhs <- rep(1, nr)
c.sig <- rep("<=", nd)
c.rhs <- rep(1, nd)
appo <- lp.transport(cost.mat=mdist, row.signs=r.sig, row.rhs=r.rhs, col.signs=c.sig, col.rhs=c.rhs)
}
else if(nr > nd){
warning("There more recipients than donors!")
cat("some donors will be used more than once", fill=TRUE)
r.sig <- rep("==", nr)
r.rhs <- rep(1, nr)
c.sig <- rep(">=", nd)
c.rhs <- rep(1, nd)
appo <- lp.transport(cost.mat=mdist, row.signs=r.sig, row.rhs=r.rhs, col.signs=c.sig, col.rhs=c.rhs)
}
sol <- appo$solution
ss <- c(t(sol))
cc <- c(t(col(sol)))
dist.rd <- mdist[cbind(1:nr, cc[as.logical(ss)] )]
rec.lab <- r.lab
don.lab <- d.lab[c(cc[as.logical(ss)])]
}
# the function solve_LSAP() in package clue is used
if(constr && (c.alg=="Hungarian" || c.alg=="hungarian")){
if(nr > nd) stop("It is required that no. of donors is greater \n or equal than the no. of recipients")
sol <- solve_LSAP(x=mdist, maximum=FALSE)
rec.lab <- r.lab
don.lab <- d.lab[as.integer(sol)]
dist.rd <- mdist[cbind(rec.lab, don.lab)]
}
#output
mtc.ids <- cbind(rec.id=rec.lab, don.id=don.lab)
if(constr) fine <- list(mtc.ids=mtc.ids, dist.rd=dist.rd, call=match.call())
else fine <- list(mtc.ids=mtc.ids, dist.rd=dist.rd, noad=nad, call=match.call())
fine
}
out <- NND.hd(rec=data.rec, don=data.don, dfun=dist.fun, constr=constrained, c.alg=constr.alg )
fix(out)
rm(list=ls())
chem_eic <-"T:/probleme bea/rematchin/"
chem_travail <- "T:/probleme bea/rematchin/"
load(file=paste0(chem_eic,"match.eic1958.RData"))
load(file=paste0(chem_eic,"match.eic1962.RData"))
#pat  <- as.data.frame(pat)
library(StatMatch) # loads StatMatch
source(paste0(chem_travail,"NND.eir.pat2.R"))
source(paste0(chem_travail,"Distance.R"))
eic1958 <- subset(eic1958, sexe != "2" | is.na(sexe) | pcs18 != "0" | is.na(pcs18) | statut18 != "08" | is.na(statut18) | TrancheRev18 != "0" | is.na(TrancheRev18))
eic1958 <- subset(eic1958, sexe != "1" | is.na(sexe) | pcs18 != "3" | is.na(pcs18) | statut18 != "02" | is.na(statut18) | TrancheRev18 != "1" | is.na(TrancheRev18))
eic1958 <- subset(eic1958, sexe != "2" | is.na(sexe) | pcs18 != "5" | is.na(pcs18) | statut18 != "03" | is.na(statut18) | TrancheRev18 != "1" | is.na(TrancheRev18))
eic1958 <- subset(eic1958, sexe != "2" | is.na(sexe) | pcs18 != "3" | is.na(pcs18) | statut18 != "03" | is.na(statut18) | TrancheRev18 != "2" | is.na(TrancheRev18))
eic1958 <- subset(eic1958, sexe != "2" | is.na(sexe) | pcs18 != "5" | is.na(pcs18) | statut18 != "08" | is.na(statut18) | TrancheRev18 != "3" | is.na(TrancheRev18))
######## définition des paramètres du matching ######
#pour matcher sur le statut en à la date, on crée
match.exact <- c("sexe","pcs18","statut18","TrancheRev18")
match.var   <- c("montant_tot18")
my.dist <- function(rec,don) {
return(my.dist.gen(data.a=rec, data.b=don, submat=submat.gen))
}
#il faudrait aussi en théorie mettre un poid relatif aux différentes variables et distance
######## constitution des sous-groupes ########
l.eic1962 <- split(eic1962, f = as.list(eic1962[,c(match.exact) ]),drop=FALSE) #ici, on met drop=FALSE ça simplifie ensuite
taille.ssgroupe.eic1962 <- unlist(lapply(l.eic1962,nrow))  #table(taille.ssgroupe.eic) sum(taille.ssgroupe.eic)
l.eic1958 <- split(eic1958, f = as.list(eic1958[,c(match.exact) ]),drop=TRUE)
taille.ssgroupe.eic1958 <- unlist(lapply(l.eic1958,nrow)) # table(taille.ssgroupe.pat) ; sum(taille.ssgroupe.pat)
#### repère les problèmes et donne des donneurs différents parfois
for(h in names(l.eic1958)){
#crée un data frame vide s'il n'existe pas -> inutile depuis qu'on abandonne le drop plus haut
if (is.null(l.eic1962[[h]])) {
l.eic1962[[h]] <- data.frame()
}
if (nrow(l.eic1958[[h]]) > 0 & nrow(l.eic1962[[h]])==0 ) {
print(paste0(h," on a dans pat ",nrow(l.eic1958[[h]])," et dans eic seulement ",nrow(l.eic1962[[h]])))
if (substr(h,3,3)==" " | substr(h,3,3)=="1" ) {
# print(paste0(substr(h,1,2),"5",substr(h,4,6)))
l.eic1962[[h]] <- l.eic1962[[ paste0(substr(h,1,2),"5",substr(h,4,6))   ]]
}
}
}
#On ne matche pas les 5 cas de eic1958 qui posent problème (on relachera les contraintes pour eux)
#eic1958 <- eic1958[which( !((eic1958$sexe == 2) & (eic1958$pcs18 == 0) & (eic1958$statut18 == 08) & (eic1958$TrancheRev18 == 0)) ),]
#eic1958 <- eic1958[which( !((eic1958$sexe == 1) & (eic1958$pcs18 == 3) & (eic1958$statut18 == 02) & (eic1958$TrancheRev18 == 1)) ),]
#### création des éléments pour mémoriser les résultats de chaque sous-groupe
H <- length(l.eic1958) ; mtc.ids <- as.list(numeric(H)) ; dist.rd <- as.list(numeric(H)) ; noad <- as.list(numeric(H))
##### application de la procédure ####
t0 <- Sys.time()
pas.match <- c()
for(h in names(l.eic1958)){
if ( #nrow(l.pat[[h]]) * nrow(l.eic[[h]]) * nrow(l.eic[[h]]) < 1000000 & # condition en cas de constr.alg=lpSolve
nrow(l.eic1958[[h]])> 0 & nrow(l.eic1962[[h]]) > 1 ) { #controle pour des raisons de place et de programme
print(h)
NND.hotdeck(data.rec=l.eic1958, data.don=l.eic1962, h =h, match.vars=match.var,
don.class=match.exact, dist.fun="euclidean", dist.carr=TRUE,
date.carr= paste0("statut",rep(26:39)), constrained=FALSE, option="contournement")
}
else {pas.match <- c(pas.match,h)}
}
print (Sys.time()-t0)
pas.match
#petit élément pour voir ce qu'on a raté
for(h in pas.match){
print(paste0(h," on a dans pat ",nrow(l.eic1958[[h]])," et dans eic ",nrow(l.eic1962[[h]])))
}
###### mise en forme finale, on fait une table à deux colonnes, ident de patrimoine à gauche, ident eic à droite ####
mmm <- unlist(lapply(mtc.ids, t))
#il y a un petit couac avec les sorties mtc, mais on s'adapte avec la ligne ci-dessou
mmm <- mmm[substr(mmm,1,3)=="rec" | substr(mmm,1,3)=="don"]
mmm <- substring(mmm, 5)
match <- matrix(mmm, ncol=2, byrow=TRUE)
dimnames(match) <- list(NULL, c("eic1958.id", "eic1962.id"))
View(match)
# source("P:/Retraites/PENSIPP 0.0/Modèle/Outils/OutilsRetraite/OutilsMS.R")
# source("P:/Retraites/PENSIPP 0.0/Modèle/Outils/OutilsRetraite/OutilsDestinie.R")
#setwd("C:/Users/a.eidelman/Desktop/GenIPP_Pyth/liam/Patrimoine/data/")
#setwd("M:/Myliam2/Patrimoine/data/")
setwd("T:/Myliam2/Genebios/data/")
debut        <- 1900
t_deb        <- 109
t_fin        <- 160
# Lecture donnÃ©es d'Ã©tat initial (NB : le tableau intermÃ©diaire buf est lu sous forme de dataframe
# et immÃ©diatement converti en type matrix, ce qui est nÃ©cessaire pour l'extraction de la
# sous-matrice des identifiants des enfants)
buf                          <- read.csv2("init/pop.csv",header=FALSE)
dimnames(buf)[[2]] <- c("id","period","age","sexe","findet","pere","mere","n_enf","enf1","enf2","enf3","enf4","enf5","enf6")
#on retire les enf puisque seules les variables pere et mere vont nous être utiles
person_sta <- subset(buf, select=-c(n_enf,enf1,enf2,enf3,enf4,enf5,enf6))
n <- nrow(buf)
person_sta[,2] <- rep.int(2009,n)
#on passe de la date de naissance à l'age
person_sta[,3] <- 2009 - (1900+person_sta[,3])
View(buf)
yini_mean          <- 1500
# Ce modÃ¨le est une adaptation de BBC. Il simule un marchÃ© du travail unique avec une
# population de taille fixe :
# - Les individus entrent dans cette population a l'age de 16 ans en Ã©tant scolarisÃ©s
# - Ils quittent le systÃ¨me scolaire selon des probabilitÃ©s exogÃ¨nes
# - Une fois sur le marchÃ© du travail ils reÃ§oivent des offres d'emploi et de salaires
#   dÃ©pendant de leur niveau d'Ã©ducation.
# - Les productivitÃ©s ne se revÃ¨lent qu'une fois en emploi
# - Chaque annÃ©e, la position dans le poste est rÃ©Ã©valuee :
#   La productivitÃ© Ã©volue selon une marchÃ© alÃ©atoire
#   Si la marge=productivitÃ©-cout du travail est trop faible, il y a licenciement
#   Dans le cas inverse, il y rÃ©vision du salaire Ã  la hausse
# - En cas de licenciement, l'individu devient chomeur et se voit Ã  nouveau offrir des
#   emplois. Les salaires offerts sont fonction du dernier salaire connu et la productivitÃ©
#   de la dernire productivitÃ© observÃ©e, mais elle ne se revÃ¨le, lÃ  encore qu'une fois
#   dans le poste
# - Il y a la possibilitÃ© de simuler des chocs de demande
# - Les individus quittent le marchÃ© du travail Ã  60 ans. Ils sont remplacÃ©s par un
#   individu de mÃªme identifiant agÃ© de 16 ans
#
#
# Les paramÃ¨tres de ce modÃ¨le sont
# - Les probabilitÃ©s d'entrer sur le marchÃ© du travail
# - La distribution des productivitÃ©s dans le premier emploi compte tenu de l'Ã¢ge de fin
#   d'Ã©tude
# - Les paramÃ¨tres gouvernant les variation de la productivitÃ© au cours du temps :
#   proba d'un choc, moyenne et sigma de ce choc
# - La marge souhaitÃ©e par l'employeur
# - Les paramÃ¨tres de la fonction de nÃ©gociation salariale
# - Les parametres dÃ©crivant le lien entre salaires et productivitÃ©s avant et aprÃ¨s un
#   choc de chÃ´mage
# ParamÃ¨tres globaux de la simulation
taille             <- 4500   # 100 individus par classe d'Ã¢ge
horizon            <- 50
# Variables individuelles
age                <- rep(0,taille)
educ               <- rep(0,taille)
statut             <- rep(0,taille)
y                  <- rep(0,taille)
w                  <- rep(0,taille)
cout               <- rep(0,taille)
# Variables macro exogÃ¨ne
climat             <- rep(1   ,50+horizon)
choc_prod_macro    <- rep(1   ,50+horizon)
smic               <- rep(1000,50+horizon)
taux_min           <- rep(0.04,50+horizon)
taux_max           <- rep(0.30,50+horizon)
seuil_annul        <- rep(1.6 ,50+horizon)
# Variables macro endogÃ¨nes
U                  <- rep(0,taille)
E                  <- rep(0,taille)
W                  <- rep(0,taille)
# ParamÃ¨tres
proba_entree       <- seq(from=.1,to=1,by=.1)
proba_licenciement <- 0.5
proba_offre        <- 0.5
marge_ref          <- 0.4
rattrap            <- 0.33
yini_mean          <- 1500
yini_accr          <- 100
yini_std           <- 200
ychoc_mean         <- 0.0
ychoc_accr         <- 0.01
ychoc_std          <- 0.01
ydec_mean          <- 0.05
wdec_mean          <- 0.05
# Calcul du cout du travail a partir du salaire
cout <- function (w,t)
{
if (w <= smic[t])
{
return ((1+taux_min[t])*w)
}
else if (w >= seuil_annul[t]*smic[t])
{
return ((1+taux_max[t])*w)
}
else
{
return (w*(1+taux_min[t]+(taux_max[t]-taux_min[t])*
((w/smic[t]-1)/(seuil_annul[t]-1))))
}
}
# Calcul du salaire a partir du cout du travail
inv_cout <- function(c,t)
{
if (c>(1+taux_max[t])*(seuil_annul[t]*smic[t]))
{
return (c/(1+taux_max[t]))
}
else if (c<(1+taux_min[t])*smic[t])
{
return (c/(1+taux_min[t]))
}
else
{
a <- -(taux_max[t]-taux_min[t])/((seuil_annul[t]-1)*smic[t])
b <- -(1+taux_min[t]-(taux_max[t]-taux_min[t])/(seuil_annul[t]-1))
w <- (-b-(b**2-4*a*c)**0.5)/(2*a)
return (w)
}
}
# Chocs de productivitÃ©
choc_y <- function(i,t)
{
return (choc_prod_macro[t]*(1+rnorm(1,mean=ychoc_mean+ychoc_accr*(educ[i]-16),
sd=ychoc_std)))
}
# Decote productivitÃ©
decote_y <- function ()
{
return (runif(1,min=1-2*ydec_mean,max=1))
}
# Decote salariale
decote_w <- function ()
{
return (runif(1,min=1-2*wdec_mean,max=1))
}
# ProductivitÃ© de depart
yini <- function(i,t)
{
return (rnorm(1,mean=yini_mean+yini_accr*(educ[i]-16),
sd=yini_std))
}
# Salaire de depart
wini <- function(i,t)
{
return (max(smic[t],inv_cout((1-marge_ref)*(yini_mean+yini_accr*educ[i]))))
}
# Fonction simulant l'ensemble des Ã©vÃ¨nements individuels possibles pour une annÃ©e donnÃ©e
transitions <- function(i,t)
{
# Incrementation age
age [i] <<- age[i]+1
# Depart en retraite : l'individu est remplacÃ© par un entrant
if (age[i]==60)
{
age[i]     <<- 16
educ[i]    <<- 16
y[i]       <<- 0
w[i]       <<- 0
statut[i]  <<- 0
}
# Entree sur le marche du travail
if (statut[i]==0)
{
if (runif(1)<proba_entree[age[i]-14])
{
statut[i] <<- 1
educ[i]   <<- age[i]
}
}
# Devenir des individus en emploi
if (statut[i]==2)
{
y[i]       <<- y[i]*choc_y(i,t)
w[i]       <<- max(w[i],smic[t])
w_cible    <-  inv_cout(y[i]*(1-marge_ref),t)
if (w_cible > w[i])
{
w[i] <<- w[i]+rattrap*(w_cible-w[i])
}
else if (runif(1)<proba_licenciement)
{
statut[i] <<- 1
}
}
# Devenir des chomeurs
if ((statut[i]==1) & (runif(1)<proba_offre))
{
statut[i]  <<- 2
y[i] <<- max(yini(i,t),y[i]*decote_y())
w[i] <<- max(wini(i,t),w[i]*decote_w())
}
}
# Programme principal
# Initialisation de la population
# Pour chaque individu, on retrace une carriÃ¨re passee jusqu'Ã  l'Ã¢ge courant
for (i in 1:taille)
{
age_courant <- 15+(i%%45)
age[i] <- 15
for (t in (50-(age_courant-15)):50)
{
transitions(i,t)
}
}
hist(age)
hist(w[which(statut==2)])
hist(statut)
# Projection
# for (t in 50:50+horizon)
# {
#    for (i in 1:taille)
#    {
#       transitions(i,t)
#    }
#
#    U[t]   <- sum(statut==1)
#    E[t]   <- sum(statut==2)
#    W[t]   <- mean(w)
#
#    if ((t%%10)==0)
#    {
#      hist(w)
#    }
# }
#
warnings()
